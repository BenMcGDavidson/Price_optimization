import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Load the data
df = pd.read_csv('retail_price.csv')
df.sort_values(by=['product_id'], inplace=True)

# Define features and target variable
X = df[['total_price',
        'freight_price',
        'product_photos_qty',
        'product_weight_g',
        'product_score',
        'customers',
        'weekday',
        'weekend',
        'holiday',
        'month',
        'year',
        'volume',
        'comp_1',
        'freight_price_comp1',
        'comp_2',
        'freight_price_comp2',
        'comp_3',
        'freight_price_comp3',
        'lag_price']]
y = df['unit_price']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the XGBoost regressor
model = XGBRegressor(objective='reg:squarederror')

# Train the model
model.fit(X_train, y_train)

# Make predictions on the training set
y_train_pred = model.predict(X_train)

# Evaluate the model on the training set
train_rmse = np.sqrt(mean_squared_error(y_train, y_train_pred))
train_mae = mean_absolute_error(y_train, y_train_pred)
train_r2 = r2_score(y_train, y_train_pred)

print("Training RMSE:", train_rmse)
print("Training MAE:", train_mae)
print("Training R-squared:", train_r2)

# Make predictions on the testing set
y_test_pred = model.predict(X_test)

# Evaluate the model on the testing set
test_rmse = np.sqrt(mean_squared_error(y_test, y_test_pred))
test_mae = mean_absolute_error(y_test, y_test_pred)
test_r2 = r2_score(y_test, y_test_pred)

print("Testing RMSE:", test_rmse)
print("Testing MAE:", test_mae)
print("Testing R-squared:", test_r2)

# Export the test results to a CSV file
test_results = pd.DataFrame({'Actual': y_test, 'Predicted': y_test_pred})
test_results.to_csv('xgboost_test_results.csv', index=False)